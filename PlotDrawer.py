#! /usr/bin/env python
# -*- coding: utf-8 -*-
from matplotlib import pyplot as plt
import numpy as np
import math
import datetime
import os

#plt.rc('font', family='Computer Modern')
plt.rc('font', **{'family': 'serif', 'serif': ['Computer Modern'], 'size': 16})
plt.rc('text', usetex=True)
plt.rc('text.latex',unicode=True)
plt.rc('text.latex',preamble=r'\usepackage[utf8]{inputenc}')
plt.rc('text.latex',preamble=r'\usepackage[russian]{babel}')


xN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(0,))
yN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(1,))
vxN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(2,))
vyN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(3,))
EN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(4,))
LN = np.loadtxt(open('./output/resultN.dat', 'r'), delimiter=', ', skiprows=1, usecols=(5,))
xP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(0,))
yP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(1,))
vxP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(2,))
vyP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(3,))
EP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(4,))
LP = np.loadtxt(open('./output/resultP.dat', 'r'), delimiter=', ', skiprows=1, usecols=(5,))

inputfile = open('./input/data.dat')
dt = float(inputfile.readline())
n = int(inputfile.readline())
inputfile.readline()
inputfile.readline()
inputfile.readline()
inputfile.readline()
M = float(inputfile.readline())

timescale = 3.335640952e-5

EnormedN = EN/EN[0]-1
LnormedN = LN/LN[0]-1
EnormedP = EP/EP[0]-1
LnormedP = LP/LP[0]-1

outputdir = './output/'+datetime.datetime.now().strftime("%Y.%m.%d-%H:%M:%S")+'/'
os.mkdir(outputdir)
os.system('cp ./input/data.dat '+outputdir+'data.dat')

fig, ax = plt.subplots()
ax.scatter(0, 0, color='k')
ax.plot(xN, yN, color='k')
ax.axis('equal')
ax.grid()
ax.set(xlabel='Координата $x$, 10 км', ylabel='Координата $y$, 10 км', title='Орбита системы (Н. случай)')
ax.margins(0.05)
fig.savefig(outputdir+'OrbitN.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, xN, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $x$, 10 км', title='зависимость $x(t)$ (Н. случай)')
fig.savefig(outputdir+'x-tN.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, yN, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $y$, 10 км', title='зависимость $y(t)$ (Н. случай)')
fig.savefig(outputdir+'y-tN.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vxN, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_x$, $c$', title='зависимость $v_x(t)$ (Н. случай)')
fig.savefig(outputdir+'vx-tN.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vyN, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_y$, $c$', title='зависимость $v_y(t)$ (Н. случай)')
fig.savefig(outputdir+'vy-tN.png')

fig = plt.figure(6)
ax1 = plt.subplot(211)
ax1.plot(dt*np.arange(n+1)*timescale, EnormedN, color='k')
ax1.grid()
ax1.margins(0.05)
ax1.set(xlabel='Время, сек', ylabel=r'$\frac{E}{E_0}-1$', title='Ошибки энергии (Н. случай)')
#fig.savefig(outputdir+'EnergyError.png')
#fig, ax = plt.subplots()
ax2 = plt.subplot(212)
ax2.plot(dt*np.arange(n+1)*timescale, LnormedN, color='k')
ax2.grid()
ax2.margins(0.05)
ax2.set(xlabel='Время, сек', ylabel=r'$\frac{L}{L_0}-1$', title='Ошибки углового момента (Н. случай)')
plt.tight_layout()
fig.savefig(outputdir+'ErrorsN.png')


fig, ax = plt.subplots()
ax.scatter(0, 0, color='k')
ax.plot(xP, yP, color='k')
ax.axis('equal')
ax.grid()
ax.set(xlabel='Координата $x$, 10 км', ylabel='Координата $y$, 10 км', title='Орбита системы (П-н. случай)')
ax.margins(0.05)
fig.savefig(outputdir+'OrbitP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, xP, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $x$, 10 км', title='зависимость $x(t)$ (П-н. случай)')
fig.savefig(outputdir+'x-tP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, yP, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $y$, 10 км', title='зависимость $y(t)$ (П-н. случай)')
fig.savefig(outputdir+'y-tP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vxP, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_x$, $c$', title='зависимость $v_x(t)$ (П-н. случай)')
fig.savefig(outputdir+'vx-tP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vyP, color='k')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_y$, $c$', title='зависимость $v_y(t)$ (П-н. случай)')
fig.savefig(outputdir+'vy-tP.png')

fig = plt.figure(12)
ax1 = plt.subplot(211)
ax1.plot(dt*np.arange(n+1)*timescale, EnormedP, color='k')
ax1.grid()
ax1.margins(0.05)
ax1.set(xlabel='Время, сек', ylabel=r'$\frac{E}{E_0}-1$', title='Ошибки энергии (П-н. случай)')
#fig.savefig(outputdir+'EnergyError.png')
#fig, ax = plt.subplots()
ax2 = plt.subplot(212)
ax2.plot(dt*np.arange(n+1)*timescale, LnormedP, color='k')
ax2.grid()
ax2.margins(0.05)
ax2.set(xlabel='Время, сек', ylabel=r'$\frac{L}{L_0}-1$', title='Ошибки углового момента (П-н. случай)')
plt.tight_layout()
fig.savefig(outputdir+'ErrorsP.png')


fig, ax = plt.subplots()
ax.scatter(0, 0, color='k')
ax.plot(xN, yN, color='k')
ax.plot(xP, yP, color='r')
ax.axis('equal')
ax.grid()
ax.set(xlabel='Координата $x$, 10 км', ylabel='Координата $y$, 10 км', title='Орбиты системы')
ax.margins(0.05)
fig.savefig(outputdir+'OrbitNP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, xN, color='k')
ax.plot(dt*np.arange(n+1)*timescale, xP, color='r')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $x$, 10 км', title='зависимости $x(t)$')
fig.savefig(outputdir+'x-tNP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, yN, color='k')
ax.plot(dt*np.arange(n+1)*timescale, yP, color='r')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Координата $y$, 10 км', title='зависимости $y(t)$')
fig.savefig(outputdir+'y-tNP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vxN, color='k')
ax.plot(dt*np.arange(n+1)*timescale, vxP, color='r')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_x$, $c$', title='зависимости $v_x(t)$')
fig.savefig(outputdir+'vx-tNP.png')

fig, ax = plt.subplots()
ax.plot(dt*np.arange(n+1)*timescale, vyN, color='k')
ax.plot(dt*np.arange(n+1)*timescale, vyP, color='r')
ax.grid()
ax.margins(0.05)
ax.set(xlabel='Время, сек', ylabel='Скорость $v_y$, $c$', title='зависимости $v_y(t)$')
fig.savefig(outputdir+'vy-tNP.png')

fig = plt.figure(18)
ax1 = plt.subplot(211)
ax1.plot(dt*np.arange(n+1)*timescale, EnormedN, color='k')
ax1.plot(dt*np.arange(n+1)*timescale, EnormedP, color='r')
ax1.grid()
ax1.margins(0.05)
ax1.set(xlabel='Время, сек', ylabel=r'$\frac{E}{E_0}-1$', title='Ошибки энергий')
#fig.savefig(outputdir+'EnergyError.png')
#fig, ax = plt.subplots()
ax2 = plt.subplot(212)
ax2.plot(dt*np.arange(n+1)*timescale, LnormedN, color='k')
ax2.plot(dt*np.arange(n+1)*timescale, LnormedP, color='r')
ax2.grid()
ax2.margins(0.05)
ax2.set(xlabel='Время, сек', ylabel=r'$\frac{L}{L_0}-1$', title='Ошибки угловых моментов')
plt.tight_layout()
fig.savefig(outputdir+'ErrorsNP.png')
